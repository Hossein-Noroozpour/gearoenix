CMAKE_MINIMUM_REQUIRED (VERSION 3.1 FATAL_ERROR)

PROJECT (GEAROENIX)

SET (PROJECT_DESCRIPTION "\"A cross-platform C++ game engine.\"")

SET (GX_VERSION_MAJOR 0)
SET (GX_VERSION_MINOR 2)
SET (GX_VERSION_PATCH 0)
SET (GX_VERSION "${GX_VERSION_MAJOR}.${GX_VERSION_MINOR}.${GX_VERSION_PATCH}")

OPTION (GX_USE_SDL2 "Use SDL2 library" ON)
OPTION (GX_USE_OPENGL_ES2 "Activate OpenGL ES 2" ON)
OPTION (GX_USE_OPENGL_ES3 "Activate OpenGL ES 3" ON)
OPTION (GX_USE_OPENGL_33 "Activate OpenGL 3.3" ON)
OPTION (GX_USE_OPENGL_43 "Activate OpenGL 4.3" ON)
OPTION (GX_USE_VULKAN "Activate Vulkan (WIP)" OFF)
OPTION (GX_GENERATE_DOCUMENTS "Generate documentation" ON)
OPTION (GX_ENABLE_TESTS "Enables the tests" OFF)
OPTION (GX_ENABLE_EXAMPLES "Enables the examples" ON)
OPTION (GX_ENABLE_COVERAGE "Enables the measurement of test coverages" OFF)

SET (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/modules/")
SET (CMAKE_CXX_STANDARD 17)
SET (CMAKE_CXX_STANDARD_REQUIRED ON)
SET (GX_PATH_SEP "/")

IF (GX_ENABLE_TESTS AND GX_ENABLE_COVERAGE)
    INCLUDE (CodeCoverage)
    APPEND_COVERAGE_COMPILER_FLAGS ()
    SET (COVERAGE_EXCLUDES 
        "/usr/*"
        "${CMAKE_SOURCE_DIR}/examples/*"
        "${CMAKE_SOURCE_DIR}/sdk/*"
        "${CMAKE_SOURCE_DIR}/tests/*")
    SETUP_TARGET_FOR_COVERAGE (NAME GX_COVERAGE EXECUTABLE ctest DEPENDENCIES GX_TESTS)
ENDIF (GX_ENABLE_TESTS AND GX_ENABLE_COVERAGE)

IF (MSVC)
    OPTION (GX_USE_DIRECTX11 "Activate Direct3DX 11 (WIP)" OFF)
    OPTION (GX_USE_DIRECTX12 "Activate Direct3DX 12 (WIP)" OFF)
    SET (GX_PATH_SEP "\\")
    SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /std:c++17 /W4")
    FUNCTION (GX_MAKE_LIB GX_CROSS_LIB_FILE GX_LIB_NAME)
        SET (${GX_CROSS_LIB_FILE} "${GX_LIB_NAME}.lib" PARENT_SCOPE)
    ENDFUNCTION (GX_MAKE_LIB)
ELSE ()
    SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 -Wall -Wextra")
    FUNCTION (GX_MAKE_LIB GX_CROSS_LIB_FILE GX_LIB_NAME)
        SET (${GX_CROSS_LIB_FILE} "lib${GX_LIB_NAME}.a" PARENT_SCOPE)
    ENDFUNCTION (GX_MAKE_LIB)
ENDIF (MSVC)

SET (GX_SDK_PATH "${CMAKE_SOURCE_DIR}/sdk/")
MESSAGE (STATUS "Gearoenix SDK path is '${GX_SDK_PATH}'.")

SET (GX_SDK_LIB_PATH "${GX_SDK_PATH}libs/")
MESSAGE (STATUS "Gearoenix SDK libs path is '${GX_SDK_LIB_PATH}'.")

SET (BOOST_INCLUDE_DIRS "${GX_SDK_PATH}/boost")
SET (GLM_INCLUDE_DIRS "${GX_SDK_PATH}/glm")
SET (SDL2_INCLUDE_DIRS "${GX_SDK_PATH}/SDL2/include")
SET (STB_INCLUDE_DIRS "${GX_SDK_PATH}/stb")

SET (DEFAULT_BUILD_TYPE "MinSizeRel")
if (EXISTS "${CMAKE_SOURCE_DIR}/.git")
    SET (DEFAULT_BUILD_TYPE "Debug")
endif ()
 
IF (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    MESSAGE (STATUS "Setting build type to '${DEFAULT_BUILD_TYPE}' as none was specified.")
    SET (CMAKE_BUILD_TYPE "${DEFAULT_BUILD_TYPE}" CACHE STRING "Choose the type of build." FORCE)
    SET_PROPERTY(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
ENDIF (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)

SET(GX_LIBS)

INCLUDE_DIRECTORIES (${STB_INCLUDE_DIRS})

IF (GX_USE_SDL2)
    SET (GX_SDL2_PATH "${GX_SDK_PATH}/SDL2")
    ADD_SUBDIRECTORY(${GX_SDL2_PATH})
    INCLUDE_DIRECTORIES (${SDL2_INCLUDE_DIRS})
    SET (GX_LIBS 
            ${GX_LIBS}
            SDL2-static SDL2main)
    IF (MSVC)
        SET (GX_LIBS ${GX_LIBS} winmm version oleaut32 imm32)
    ELSEIF (APPLE)
        FIND_LIBRARY(COCOA_LIBRARY Cocoa)
        FIND_LIBRARY(CORE_AUDIO_LIBRARY CoreAudio)
        FIND_LIBRARY(CORE_VIDEO_LIBRARY CoreVideo)
        FIND_LIBRARY(CORE_SERVICES_LIBRARY CoreServices)
        FIND_LIBRARY(AUDIO_TOOLBOX_LIBRARY AudioToolbox)
        FIND_LIBRARY(FORCE_FEEDBACK_LIBRARY ForceFeedback)
        FIND_LIBRARY(IO_KIT_LIBRARY IOKit)
        FIND_LIBRARY(CARBON_LIBRARY Carbon)
        MARK_AS_ADVANCED(
            COCOA_LIBRARY
            CORE_AUDIO_LIBRARY
            CORE_VIDEO_LIBRARY
            CORE_SERVICES_LIBRARY
            AUDIO_TOOLBOX_LIBRARY
            FORCE_FEEDBACK_LIBRARY
            IO_KIT_LIBRARY
            CARBON_LIBRARY)
        SET (GX_LIBS 
            ${GX_LIBS}
            iconv
            ${COCOA_LIBRARY}
            ${CORE_AUDIO_LIBRARY}
            ${CORE_VIDEO_LIBRARY}
            ${CORE_SERVICES_LIBRARY}
            ${AUDIO_TOOLBOX_LIBRARY}
            ${FORCE_FEEDBACK_LIBRARY}
            ${IO_KIT_LIBRARY}
            ${CARBON_LIBRARY})
    ELSE ()
        SET (GX_LIBS 
            ${GX_LIBS}
            pthread
            dl
            sndio)
    ENDIF (MSVC)
ENDIF (GX_USE_SDL2)

ADD_SUBDIRECTORY (gearoenix)

IF(GX_ENABLE_EXAMPLES)
ADD_SUBDIRECTORY (examples)
ENDIF(GX_ENABLE_EXAMPLES)

IF(GX_ENABLE_TESTS)
    INCLUDE (CTest)
    ENABLE_TESTING ()
    ADD_SUBDIRECTORY (tests)
ENDIF(GX_ENABLE_TESTS)